-> Stellt Verbindung zur Datenbank her und füllt diese mit Beispiel-/Fülldaten

Kategorien:
- Erstellt 5 feste Kategorien: Essen & Trinken, Einkaufen, Unterhaltung, ------ & Sonstiges

User:
- Damit jeweils eine bestimmte Anzahl an Nutzern mit gleichem Standort zu erstellen
   wird eine Anzahl an Location_clustern, also die Anzahl von Gruppen nah beieinander liegenden Orten,
   und eine Anzahl an locations_per_cluster, also die jeweilige Anzahl an Orten pro Cluster, festgelegt
- Da es jede Location jeweils einem Nutzer zugeordnet wird setzt sich die Nutzeranzahl wie folgt zusammen:
    "user_count = location_cluster*locations_per_cluster"
- Der genaue Abstand der Locations sollte zwischen 0.01 und 0,1 beim Längen- sowie Breitengrad liegen
- Die User_ID wird per Autoinkrement erhöht, daher wird nur noch per Faker ein Name und wie zuvor
    beschrieben eine location generiert

Posts:
- Entsprechend der anzahl an usern werden Posts generiert
- Für die Posts werden per Faker die timestamps, titel, und beschreibungen generiert
- Die Anzahl an votes des posts wird ebenfalls zufällig generiert und liegt zwischen 0 und dem variablen
    Wert max_num_votes (es wird hierbei außer Acht gelassen, dass negative und positive votes getrennt
    angezeigt bzw. auf einen wert aufgerechnet werden würden)
- Für den Post wird zudem ein zufälliger Autor aus den Usern durch "author = randint(1, user_count) ausgewählt"
    (Die Markierung der User die Anbieter sind wird hierbei nicht einbezogen)
- Zuletzt wird eine zufällige Kategorie von 1 bis 5 ausgewählt

Votes:
- Für die erstellten Votes wird eine Schleife der Größe der Anzahl an in "Posts" angegebenen Votes durchlaufen
- Hierbei wird zunächst als vote_value zufällig entweder 0 oder 1 bestimmt und der Timestamp durch Faker generiert
- Um einen User auszuwählen, der den Vote getätigt hat werden alle user in eine Liste gepackt und durchmischt,
    damit pro post jeder User nur ein Mal voten kann.
- Die user werden dann nacheinander aus der Liste durch pop() entfernt und in "voter" gespeichert
- Als vote_target wird der gerade in dem Schleifendurchlauf erstellte Post gewählt, sodass die
    Posts auch im Vote-Table sortiert dargestellt werden
- Damit die Anzahl an Posts, bei denen ein User gevotet UND kommentiert hat nicht zu gering ist wird ein
    zufallswert zwischen 1 und 5 generiert. Wenn der Wert 1 ist, wird der aus der Liste generierte Voter in
    der Variable "person" zwischengespeichert.

Comments:
- Es werden pro vote 0 bis "max_comments" Kommentare erstellt
- Inhalt und timestamp werden per Faker generiert
- Falls die zuvor bei Votes generierte Zufallszahl "numer_frequency" gleich 1 ist wird als commenter der zuvor schon
    in für den voter ausgewählte User als commenter gesetzt,
    ist dies nicht der Fall wird ein zufälliger commenter aus der Liste der User gewählt
- Das comment_target ist auch hier, der zuvor in dem Schleifendurchlauf erstellte Post
